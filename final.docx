I created this program to help people make stronger passwords. It checks the password you enter and lets you know if it's strong enough or what you need to fix. The program takes your password as input and gives feedback, either saying it's strong or explaining what needs to be improved. I chose to make this because I think password security is super important, and I wanted to make something that teaches people how to improve their passwords.

One important part of the program is the list called special_char. This list includes special characters like !, @, and # that are required for strong passwords. The program uses this list to check if your password includes at least one of these characters. It goes through each character in your password and compares it to the list. Without this list, it would be a lot harder to check for special characters and make sure your password is secure.

The loop in my program is a while loop that keeps running until you enter a valid password. It checks if all the password rules are met, and if not, it gives you feedback and asks you to try again. The loop stops when the password is strong enough, which means all the conditions are met. This loop makes the program way easier to use because you don’t have to restart the whole program every time you mess up. Without it, the code would be much longer and harder to manage since I’d have to repeat a lot of the checks.

The program uses a global variable called pass_works to keep track of whether the password is valid and what’s wrong with it. There’s also a local variable called password that stores what you just typed in. The function check_pass does the main job of checking if the password meets all the rules, like being long enough, having a digit, an uppercase letter, and a special character. The conditional statements in the function check each rule and return feedback if something’s missing. For example, it can tell if your password is too short or if it doesn’t have a special character. This helps make the program more helpful and easy to understand.

One problem I ran into was making sure the program told you everything wrong with your password instead of just the first issue. At first, it only caught one problem at a time, which was frustrating. I fixed it by changing the check_pass function to check everything and give detailed feedback all at once. The part I’m most proud of is how the program explains exactly what’s wrong with your password in a clear way. If I had more time, I’d add a better interface, like a window with buttons, to make it more user-friendly. I’d also include suggestions for improving weak passwords to make it even more helpful.
